import pandas as pd
import numpy as np
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# Load the cleaned data
file_path = 'Cleaned_Seahawks_Data.xlsx'  
sheet_data = pd.read_excel(file_path)

# Extract İlke's performance directly
ilke_data = sheet_data[sheet_data['Player'] == 'İlke Demirkır']
ilke_performance = ilke_data['Performance'].values

# Extract team performance as the average performance across all players
team_performance_values = sheet_data.groupby('Player')['Performance'].mean().values.reshape(-1, 1)

# Number of games (clusters) to match İlke's data
num_games = len(ilke_performance)

# Perform clustering on team performance data to match the 6 games
kmeans = KMeans(n_clusters=num_games, random_state=0)
clusters = kmeans.fit_predict(team_performance_values)

# Aggregate team performance by clusters
team_performance_clustered = []
for cluster_id in range(num_games):
    cluster_mean = team_performance_values[clusters == cluster_id].mean()
    team_performance_clustered.append(cluster_mean)

# Convert to array and ensure alignment
team_performance_clustered = np.array(team_performance_clustered)

# Generate game numbers for both datasets
ilke_game_numbers = np.arange(1, len(ilke_performance) + 1)
team_game_numbers = np.arange(1, len(team_performance_clustered) + 1)

# Polynomial Regression
degree = 2
poly = PolynomialFeatures(degree=degree)

# Team regression
X_team = poly.fit_transform(team_game_numbers.reshape(-1, 1))
model_team = LinearRegression().fit(X_team, team_performance_clustered)
team_predictions = model_team.predict(X_team)

# İlke regression
X_ilke = poly.fit_transform(ilke_game_numbers.reshape(-1, 1))
model_ilke = LinearRegression().fit(X_ilke, ilke_performance)
ilke_predictions = model_ilke.predict(X_ilke)

# 
# Visualization with forced legend display
plt.figure(figsize=(10, 6))
plt.scatter(team_game_numbers, team_performance_clustered, color="blue", label="Team Performance (Clustered)")
plt.plot(team_game_numbers, team_predictions, color="cyan", label="Team Trend (Polynomial)")

plt.scatter(ilke_game_numbers, ilke_performance, color="red", label="İlke's Performance")
plt.plot(ilke_game_numbers, ilke_predictions, color="orange", label="İlke's Trend (Polynomial)")

plt.xlabel("Games Over the Years")
plt.ylabel("Performance")
plt.title("Performance Comparison: İlke vs Team (Clustered Data)")

# Force the legend to display
plt.legend(loc="best", fontsize=10)  # Use "best" to automatically position the legend
plt.tight_layout()
plt.savefig("output.png")
plt.show()


